{"version":3,"file":"nullfined.js","sources":["../src/nullToUndefined.js","../src/parseObject.js","../src/parseArray.js","../src/index.js"],"sourcesContent":["/**\n * Convert null value to undefined.\n * @param {Any} value data value.\n */\nconst nullToUndefined = (value) => {\n  if (value === null) return undefined;\n  return value;\n};\n\nexport default nullToUndefined;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseArray from './parseArray';\nimport nullToUndefined from './nullToUndefined';\n\n/**\n * Recursively change object null value.\n * @param {Object} object data object value to convert.\n */\nconst parseObject = (object) => {\n  /**\n   * Recursive function that change object deeply.\n   * @param {Object} child data object child value to convert.\n   */\n  const recursive = (child) => {\n    const newObject = {};\n\n    Object.keys(child).map((k) => {\n      const value = child[k];\n\n      if (isArray(value)) {\n        newObject[k] = parseArray(value);\n      } else if (isObject(value)) {\n        newObject[k] = recursive(value);\n      } else {\n        newObject[k] = nullToUndefined(value);\n      }\n\n      return true;\n    });\n\n    return newObject;\n  };\n\n  return recursive(object);\n};\n\nexport default parseObject;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseObject from './parseObject';\nimport nullToUndefined from './nullToUndefined';\n\n/**\n * Deeply convert null from any type of value from array to undefined\n * @param {Array} array data array value to convert\n */\nconst parseArray = array => array.map((v) => {\n  if (isArray(v)) {\n    return parseArray(v);\n  } else if (isObject(v)) {\n    return parseObject(v);\n  }\n\n  return nullToUndefined(v);\n});\n\nexport default parseArray;\n","import isObject from 'lodash.isobject';\nimport isArray from 'lodash.isarray';\nimport parseArray from './parseArray';\nimport parseObject from './parseObject';\nimport nullToUndefined from './nullToUndefined';\n\nexport default (data) => {\n  if (isArray(data)) return parseArray(data);\n  if (isObject(data)) return parseObject(data);\n\n  return nullToUndefined(data);\n};\n"],"names":["nullToUndefined","value","parseObject","object","recursive","child","newObject","keys","map","k","isArray","parseArray","isObject","array","v","data"],"mappings":"4VAIA,IAAMA,GAAkB,SAACC,MACT,OAAVA,QACGA,ICGHC,EAAc,SAACC,SAKD,SAAZC,GAAaC,MACXC,oBAECC,KAAKF,GAAOG,IAAI,SAACC,MAChBR,GAAQI,EAAMI,SAEhBC,GAAQT,KACAQ,GAAKE,EAAWV,GACjBW,EAASX,KACRQ,GAAKL,EAAUH,KAEfQ,GAAKT,EAAgBC,IAG1B,IAGFK,GAGQH,ICzBbQ,EAAa,QAAbA,YAAsBE,GAAML,IAAI,SAACM,SACjCJ,GAAQI,GACHH,EAAWG,GACTF,EAASE,GACXZ,EAAYY,GAGdd,EAAgBc,sBCVTC,SACVL,GAAQK,GAAcJ,EAAWI,GACjCH,EAASG,GAAcb,EAAYa,GAEhCf,EAAgBe"}